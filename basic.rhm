#lang rhombus

import "matrix.rhm" open

export:
  <+>
  <*>
  add
  s_mult
  cross
  same_shape
  internal_sum

fun same_shape(a :: Matrix, b :: Matrix):
  if a.shape.length() == b.shape.length()
  | let res = for values(same = #true):
      each i in 0..a.shape.length()
      final_when a.shape[i] == b.shape[i]
      same && (a.shape[i] == b.shape[i])
    res
  | #false

fun add(a :: Matrix, b :: Matrix):
  if a.shape == b.shape
  | let l = (_ + _).map(a.data, b.data)
    Matrix(~l: l, ~s: a.shape)
  | error("matrix addition requires both matrices to have equal shape")


fun s_mult(a :: Matrix, n :: Number):
  let l = (n * _).map(a.data)
  Matrix(~l: l, ~s: a.shape)

/*
  computes the cross product of two vectors of shape [3]
*/
fun cross(a :: Matrix, b :: Matrix) :: Matrix:
  if a.shape == [3] && b.shape == [3]
  | let [a1, a2, a3] = a.data
    let [b1, b2, b3] = b.data
    Matrix(~l: [a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1 * b2 - a2 * b1])
  | error("both a and b must be vectors with 3 elements")

/*
    computes the matrix multiplication between two bi-dimensional matrices
*/
fun mult(a :: Matrix, b :: Matrix):
  if a.shape.length() == 2 && b.shape.length() == 2
  | let m = Matrix(~s: [a.shape[0], b.shape[1]])
    for:
      each i: 1..=a.shape[0]
      each j: 1..=b.shape[1]
      each k: 1..=a.shape[1]
      m[[i,j]] := m[[i,j]] + a[[i,k]] * b[[k,j]]
    m
  | error("Multiplication only allowed for 2-dimensional matrices")\

fun internal_sum(a :: Matrix):
  let sum = for values(total = 0):
    each i in a.data
    total + i
  sum

    
operator ((x :: Matrix) <+> (y :: Matrix)) :: Matrix:
  ~weaker_than: **
  ~stronger_than: ==              
  add(x, y)

operator ((n :: Number) <*> (m :: Matrix)) :: Matrix:
  ~weaker_than: <.>
  ~stronger_than: ==                
  s_mult(m, n)