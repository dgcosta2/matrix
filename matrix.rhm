#lang rhombus/and_meta

import "operators.rhm" open
import "list_ops.rhm" as ListOps

export:
  Matrix
  <.>

class Matrix(mutable data :: List, mutable shape :: List):
  implements Indexable
  implements Equatable
  implements Printable
  implements MutableIndexable

  field stride: []
  constructor:
  | ():
      let matrix = super([0], [1])
      matrix.stride := [1]
      matrix
  | (~rows: n :: PosInt, ~columns: k :: PosInt):
      let l = for List(i: 0..(n * k)):
        0
      let matrix = super(l, [n, k])
      matrix.stride := matrix.stride_from_shape(matrix.shape)
      matrix
  // takes a nested list and stores it linearly
  | (~l: l :: List):
      // let matrix = super()
      let flat = ListOps.flat_list(l)
      let matrix = super(flat, [1])
      matrix.shape := matrix.read_shape(l)
      matrix.stride := matrix.stride_from_shape(matrix.shape)
      matrix
  // takes a flat list l and a shape list s
  | (~l: l :: List, ~s: s :: List):
      let p = ListOps.reduce(s, 1, (_ * _))
      if p == l.length()
      | let matrix = super(l, s)
        matrix.stride := matrix.stride_from_shape(s)
        matrix
      | error("invalid shape for list l")
  | (~s: s):
      let p = ListOps.reduce(s, 1, (_ * _))
      let d = for List(i: 0..p):
        0
      let matrix = super(d, s)
      matrix.stride := matrix.stride_from_shape(s)
      matrix

  method re_shape(new_shape :: List) :: Matrix:
    if ListOps.reduce(new_shape, 1, (_ * _)) == data.length()
    | shape := new_shape
      stride := stride_from_shape(new_shape)
      this
    | error("invalid shape for this matrix")

  method rows() :: PosInt:
    if shape.length() == 2 || shape.length() == 1
    | shape[0]
    | error("number of rows is only available for bi-dimensional matrices or uni-dimensional vectors")

  method cols() :: PosInt:
    match shape.length()
    | 1: 1
    | 2: shape[1]
    | ~else: error("number of columns is only available for bi-dimensional matrices or uni-dimensional vectors")
    

  // let's try one-dimension contraction
  method contr(other :: Matrix):
    if shape[shape.length() - 1] == other.shape[0]
    | let m = Matrix(~s: shape.drop_last(1).append(other.shape.drop(1)))
      let indices = m.shape.append(shape.take_last(1))
      contr_helper(m, other, indices, [])
      m
    | error("last dimension of this must match first dimension of other")
    
  method contr_helper(m :: Matrix, other :: Matrix, indices :: List, curr :: List):
    match indices
    | [a] : for (i: 1..=a):
              m[curr] := m[curr] + this[curr.take(shape.length()-1).add(i)] * other[curr.take_last(other.shape.length()-1).insert(0, i)]
    | [a, b, ...] : for (i: 1..=a):
                      contr_helper(m, other, [b, ...], curr.add(i))
                     
  /*
    swaps rows in-place
  */
  method swap_rows(r1 :: PosInt, r2 :: PosInt):
    check shape.length() ~is 2
    // finds initial position to begin replacing values
    let i_pos1 = (r1 - 1) * stride[0]
    let f_pos1 = i_pos1 + stride[0]
    let i_pos2 = (r2 - 1) * stride[0]
    let f_pos2 = i_pos2 + stride[0]
    let mutable _data = data
    for (i: i_pos1..f_pos1,
         j: i_pos2..f_pos2):
      _data := ListOps.swap(_data, i, j)
    data := _data

  // creates a copy of this matrix
  method copy():
    Matrix(~l: data, ~s: shape)

  method is_square() :: Boolean:
    shape.length() == 2 && shape[0] == shape[1]
 
  /*
      The shape of an n-dimensional matrix is an n-length list
      of numbers that represent the size of each dimmension of
      the matrix
   */
  private method read_shape(l :: List):
    match l
    | [(a :: Number), b, ...]: [l.length()]
    | [(a :: List), b, ...]: [l.length(), & read_shape(a)]

  /*
      The stride is a list of values that represent, for each dimension,
      the scalar to multiply to the index when calling get()
   */
  private method stride_from_shape(shape :: List):
    match shape
    | [_]: [1]
    | [a, & b]:
        let s = stride_from_shape(b)
        [s.first * b.first, & s]
     
  override method get(index :: List):
    let i_pos = for values(acc = 0):
      each:
        i: index
        s: 0..
      acc + ((i - 1) * stride[s])
    let f_pos = i_pos + stride[index.length() - 1]
    let l = data.sublist(i_pos, f_pos)
    if l.length() == 1
    | l.first
    | Matrix(~l: l, ~s: shape.sublist(index.length(), shape.length()))

  /*
      sets a specific value in the matrix.
  */
  override method set(index :: List, val :: Number):
    check index.length() ~is shape.length() // method can only be called for setting values
    if index.length() == shape.length()
    | let pos = for values(acc = 0):
        each:
          i: index
          s: 0..
        acc + ((i - 1) * stride[s])
      let new_l = data.set(pos, val) 
      data := new_l
    | error("method can only be called for setting values")

  override method equals(other :: Matrix, recur):
    recur(data, other.data) && recur(shape, other.shape)
  override method hash_code(recur):
    Equatable.hash_code_combine(recur(data), recur(shape))

  override method describe(mode, recur):
    match shape
    | [_]: PrintDesc.list(
             "[", this.data.map(recur), "]") 
    | [a, b, ...]:
        PrintDesc.list(
          "[",
          for List(i: 1..=a):
            (recur(this[[i]])),
          "]")


fun validate_axes(axes :: List, shape1 :: List, shape2 :: List):
  if axes[0].length[0] == axes[1].length()
  | for (i: axes[0], j: axes[1]):
      unless shape1[i] == shape2[j]
      | #false
    #true
  | #false

fun remove_at_index(l :: List, ind :: NonnegInt || List):
  match ind
  | (a :: NonnegInt): l.sublist(..ind) ++ l.sublist(ind + 1..)
  | [a, b, ...]: remove_at_index(remove_at_index(l, a), [b, ...])
  
     
/*fun tensor_dot(a :: Matrix, b :: Matrix, axes :: List):
  if validate_axes(axes, a.shape, b.shape)
  | let m = Matrix(~s: contracted_shape(axes, shape, other.shape))
    let non_contr_a = axes[0].forEach(remove_at_index(a.shape, _))
    let ind = m.shape ++
  | error("doesn't work honey")*/

/*fun dot_helper(m :: Matrix, other :: Matrix, axes :: List, indices :: List, curr :: List):
  match indices */
    
  
operator ((x :: Matrix) <.> (y :: Matrix)) :: Matrix:
  ~stronger_than: ==
  x.contr(y)

                             